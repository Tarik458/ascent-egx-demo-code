//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Ascent/Scripts/PilgrimScripts/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Pilgrim"",
            ""id"": ""a56a0edf-c3dd-4cb3-8c79-f5cb451e897d"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""88c7da56-6bf4-47fd-a407-db489c7345ba"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""033a5b71-e542-4be5-8eea-817eaf02323a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""15cc8312-97f5-4e26-8233-f77c768879fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CamerFlip"",
                    ""type"": ""Button"",
                    ""id"": ""13272a28-e986-4f9e-a488-13ddffdcca1d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""3283528a-dc64-4864-9793-72901bf20651"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2882c491-d01f-4a31-94ab-37291a02098e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e7518d09-c2b1-4b8f-80df-9b3c682f4418"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""86059878-b695-4ee7-b02b-4855e80083f9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6d56e61d-3b0d-461b-b303-64804cffcc88"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""7cfc32f6-c2a9-45d3-a14c-54006c16527c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5d97f019-1b7e-4b0a-a16d-ea9ae3fce28b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b396ee32-ecb4-4ecf-8464-9dff30b34205"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6bf88c3b-0a61-4269-80f6-d4ae75a57c53"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2d024dbe-c166-4c30-827c-e391765f42b3"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""LeftStick"",
                    ""id"": ""06c6a8ef-89ed-4c1f-a1dd-d792358f480c"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b9295c1e-5cfd-4e5f-88bf-dfbc45b89925"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5c7c5e05-9872-4ca8-b289-9b5e0bc37573"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8c774c3f-eabd-4606-be74-ecb3f6e728ba"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b20fc86e-baea-42fe-b86e-34eb73bdb0b2"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fcb8fdfd-e932-4dd8-ab77-df20acb3c19b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52c1d6ff-dfb5-49db-b169-2d2bc165aa58"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81dfdc9c-c3c4-44cd-88f5-88a7b8616167"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8954ffbf-4326-452c-abe9-4023922085af"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ead922d0-efb0-460b-90cf-832c6d3d4571"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CamerFlip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e5e0d13-596a-43c0-852b-d38b52e3bb90"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""CamerFlip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BookPages"",
            ""id"": ""b136298f-7877-4d15-805e-dee99adb7331"",
            ""actions"": [
                {
                    ""name"": ""TurnForward"",
                    ""type"": ""Button"",
                    ""id"": ""b89695a8-db6c-432d-ac20-f4fdff7032cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TurnBackward"",
                    ""type"": ""Button"",
                    ""id"": ""21f16221-9b53-445c-baa3-8388cbb729a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skip"",
                    ""type"": ""Button"",
                    ""id"": ""0ffa9f4e-20a4-4b1c-a7ff-e439094fc202"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6f9469b0-1891-4590-a567-4a5726ef787a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""TurnForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""baec0935-e1d3-4f42-b9ff-ff059795ad87"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""TurnForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ce17c86-298d-485a-b929-b8f8ccdc046a"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""TurnBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7688dca-9d25-4d61-9047-fef6cc448ddb"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""TurnBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae02c96f-9295-4b22-8296-50f3ebc3e41f"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55b513ef-76f1-4cc9-805c-b738cef35b9f"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<DualShockGamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Pilgrim
        m_Pilgrim = asset.FindActionMap("Pilgrim", throwIfNotFound: true);
        m_Pilgrim_Movement = m_Pilgrim.FindAction("Movement", throwIfNotFound: true);
        m_Pilgrim_Jump = m_Pilgrim.FindAction("Jump", throwIfNotFound: true);
        m_Pilgrim_Interact = m_Pilgrim.FindAction("Interact", throwIfNotFound: true);
        m_Pilgrim_CamerFlip = m_Pilgrim.FindAction("CamerFlip", throwIfNotFound: true);
        // BookPages
        m_BookPages = asset.FindActionMap("BookPages", throwIfNotFound: true);
        m_BookPages_TurnForward = m_BookPages.FindAction("TurnForward", throwIfNotFound: true);
        m_BookPages_TurnBackward = m_BookPages.FindAction("TurnBackward", throwIfNotFound: true);
        m_BookPages_Skip = m_BookPages.FindAction("Skip", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Pilgrim
    private readonly InputActionMap m_Pilgrim;
    private IPilgrimActions m_PilgrimActionsCallbackInterface;
    private readonly InputAction m_Pilgrim_Movement;
    private readonly InputAction m_Pilgrim_Jump;
    private readonly InputAction m_Pilgrim_Interact;
    private readonly InputAction m_Pilgrim_CamerFlip;
    public struct PilgrimActions
    {
        private @PlayerControls m_Wrapper;
        public PilgrimActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Pilgrim_Movement;
        public InputAction @Jump => m_Wrapper.m_Pilgrim_Jump;
        public InputAction @Interact => m_Wrapper.m_Pilgrim_Interact;
        public InputAction @CamerFlip => m_Wrapper.m_Pilgrim_CamerFlip;
        public InputActionMap Get() { return m_Wrapper.m_Pilgrim; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PilgrimActions set) { return set.Get(); }
        public void SetCallbacks(IPilgrimActions instance)
        {
            if (m_Wrapper.m_PilgrimActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PilgrimActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PilgrimActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PilgrimActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_PilgrimActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PilgrimActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PilgrimActionsCallbackInterface.OnJump;
                @Interact.started -= m_Wrapper.m_PilgrimActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PilgrimActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PilgrimActionsCallbackInterface.OnInteract;
                @CamerFlip.started -= m_Wrapper.m_PilgrimActionsCallbackInterface.OnCamerFlip;
                @CamerFlip.performed -= m_Wrapper.m_PilgrimActionsCallbackInterface.OnCamerFlip;
                @CamerFlip.canceled -= m_Wrapper.m_PilgrimActionsCallbackInterface.OnCamerFlip;
            }
            m_Wrapper.m_PilgrimActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @CamerFlip.started += instance.OnCamerFlip;
                @CamerFlip.performed += instance.OnCamerFlip;
                @CamerFlip.canceled += instance.OnCamerFlip;
            }
        }
    }
    public PilgrimActions @Pilgrim => new PilgrimActions(this);

    // BookPages
    private readonly InputActionMap m_BookPages;
    private IBookPagesActions m_BookPagesActionsCallbackInterface;
    private readonly InputAction m_BookPages_TurnForward;
    private readonly InputAction m_BookPages_TurnBackward;
    private readonly InputAction m_BookPages_Skip;
    public struct BookPagesActions
    {
        private @PlayerControls m_Wrapper;
        public BookPagesActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @TurnForward => m_Wrapper.m_BookPages_TurnForward;
        public InputAction @TurnBackward => m_Wrapper.m_BookPages_TurnBackward;
        public InputAction @Skip => m_Wrapper.m_BookPages_Skip;
        public InputActionMap Get() { return m_Wrapper.m_BookPages; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BookPagesActions set) { return set.Get(); }
        public void SetCallbacks(IBookPagesActions instance)
        {
            if (m_Wrapper.m_BookPagesActionsCallbackInterface != null)
            {
                @TurnForward.started -= m_Wrapper.m_BookPagesActionsCallbackInterface.OnTurnForward;
                @TurnForward.performed -= m_Wrapper.m_BookPagesActionsCallbackInterface.OnTurnForward;
                @TurnForward.canceled -= m_Wrapper.m_BookPagesActionsCallbackInterface.OnTurnForward;
                @TurnBackward.started -= m_Wrapper.m_BookPagesActionsCallbackInterface.OnTurnBackward;
                @TurnBackward.performed -= m_Wrapper.m_BookPagesActionsCallbackInterface.OnTurnBackward;
                @TurnBackward.canceled -= m_Wrapper.m_BookPagesActionsCallbackInterface.OnTurnBackward;
                @Skip.started -= m_Wrapper.m_BookPagesActionsCallbackInterface.OnSkip;
                @Skip.performed -= m_Wrapper.m_BookPagesActionsCallbackInterface.OnSkip;
                @Skip.canceled -= m_Wrapper.m_BookPagesActionsCallbackInterface.OnSkip;
            }
            m_Wrapper.m_BookPagesActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TurnForward.started += instance.OnTurnForward;
                @TurnForward.performed += instance.OnTurnForward;
                @TurnForward.canceled += instance.OnTurnForward;
                @TurnBackward.started += instance.OnTurnBackward;
                @TurnBackward.performed += instance.OnTurnBackward;
                @TurnBackward.canceled += instance.OnTurnBackward;
                @Skip.started += instance.OnSkip;
                @Skip.performed += instance.OnSkip;
                @Skip.canceled += instance.OnSkip;
            }
        }
    }
    public BookPagesActions @BookPages => new BookPagesActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    public interface IPilgrimActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnCamerFlip(InputAction.CallbackContext context);
    }
    public interface IBookPagesActions
    {
        void OnTurnForward(InputAction.CallbackContext context);
        void OnTurnBackward(InputAction.CallbackContext context);
        void OnSkip(InputAction.CallbackContext context);
    }
}
