//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Ascent/Scripts/Menus/MenuInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MenuInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MenuInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MenuInputs"",
    ""maps"": [
        {
            ""name"": ""PauseMenu"",
            ""id"": ""6877e73f-aae9-480d-8531-33f611f2e73d"",
            ""actions"": [
                {
                    ""name"": ""Pause_Unpause"",
                    ""type"": ""Button"",
                    ""id"": ""9bad634b-3744-4025-9f98-14123d40f882"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6ca473bc-d005-4219-ae3d-ff3a7db6237c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause_Unpause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fdb1c912-d659-41ce-b2fb-80262250f787"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause_Unpause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PauseMenu
        m_PauseMenu = asset.FindActionMap("PauseMenu", throwIfNotFound: true);
        m_PauseMenu_Pause_Unpause = m_PauseMenu.FindAction("Pause_Unpause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PauseMenu
    private readonly InputActionMap m_PauseMenu;
    private IPauseMenuActions m_PauseMenuActionsCallbackInterface;
    private readonly InputAction m_PauseMenu_Pause_Unpause;
    public struct PauseMenuActions
    {
        private @MenuInputs m_Wrapper;
        public PauseMenuActions(@MenuInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause_Unpause => m_Wrapper.m_PauseMenu_Pause_Unpause;
        public InputActionMap Get() { return m_Wrapper.m_PauseMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseMenuActions set) { return set.Get(); }
        public void SetCallbacks(IPauseMenuActions instance)
        {
            if (m_Wrapper.m_PauseMenuActionsCallbackInterface != null)
            {
                @Pause_Unpause.started -= m_Wrapper.m_PauseMenuActionsCallbackInterface.OnPause_Unpause;
                @Pause_Unpause.performed -= m_Wrapper.m_PauseMenuActionsCallbackInterface.OnPause_Unpause;
                @Pause_Unpause.canceled -= m_Wrapper.m_PauseMenuActionsCallbackInterface.OnPause_Unpause;
            }
            m_Wrapper.m_PauseMenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pause_Unpause.started += instance.OnPause_Unpause;
                @Pause_Unpause.performed += instance.OnPause_Unpause;
                @Pause_Unpause.canceled += instance.OnPause_Unpause;
            }
        }
    }
    public PauseMenuActions @PauseMenu => new PauseMenuActions(this);
    public interface IPauseMenuActions
    {
        void OnPause_Unpause(InputAction.CallbackContext context);
    }
}
